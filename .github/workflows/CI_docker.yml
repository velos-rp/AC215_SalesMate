name: CI Multi-Container Test

on:
  push:
    branches:
      - "*"  # Triggers when code is pushed to any branch

jobs:
  test:
    runs-on: ubuntu-latest
    environment: Container_Testing

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment (specifically Python 3.12)
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 2.1: Set PYTHONPATH to include the root directory (or src if relevant)
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV  # Adds current directory to PYTHONPATH


      # Step 3: Load Secrets for GCP Keys and validate json
      - name: Write Secret to JSON File
        env:
          GCP_KEY_COPILOT: ${{ secrets.GCP_KEY_COPILOT }}
          GCP_KEY_API: ${{ secrets.GCP_KEY_API }}
          GCP_KEY_FINETUNING: ${{ secrets.GCP_KEY_FINETUNING }}
        run: |
          mkdir -p src/rag_copilot_pipeline/secrets
          mkdir -p src/api_service/secrets
          mkdir -p src/finetuning_pipeline/secrets
          python -c "import os; open('src/rag_copilot_pipeline/secrets/gcp-key.json', 'w').write(os.getenv('GCP_KEY_COPILOT', ''))"
          python -c "import os; open('src/api_service/secrets/llm-service-account.json', 'w').write(os.getenv('GCP_KEY_API', ''))"
          python -c "import os; open('src/finetuning_pipeline/secrets/llm-service-account.json', 'w').write(os.getenv('GCP_KEY_FINETUNING', ''))"
          jq empty src/rag_copilot_pipeline/secrets/gcp-key.json
          jq empty src/api_service/secrets/llm-service-account.json
          jq empty src/finetuning_pipeline/secrets/llm-service-account.json


      # Step 4: Run the Docker Test Script
      - name: Run Docker Tests
        run: |
          cd src
          chmod +x ./docker-shell.sh
          source docker-shell.sh -d
          sleep 10

          # Define the services to test
          services=("rag-copilot-pipeline")

          # Run pytest in each container
          for service in "${services[@]}"; do
            echo "Running tests in $service..."
            docker compose exec "$service" pipenv run pytest || {
              echo "Tests failed in $service. Aborting."
              docker compose down
              exit 1
            }
          done

          # Stop the containers after tests
          docker compose down

          echo "All tests passed!"

          cd ..

      # Step 5: Run the Docker Test Script
      - name: Run Finetunning tests
        run: |
          cd src/finetuning_pipeline
          source docker-shell.sh "pipenv run pytest" || {
              echo "Tests failed. Aborting."
              # Stop all containers (assuming they were started earlier)
              docker ps -aq | xargs docker rm
              exit 1
            }

          echo "Stopping all containers..."
          docker ps -aq | xargs docker rm

          echo "All tests passed!"

          cd ..
