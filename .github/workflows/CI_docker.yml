name: CI Multi-Container Test

on:
  push:
    branches:
      - "*"  # Triggers when code is pushed to any branch

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment (specifically Python 3.12)
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 2.1: Set PYTHONPATH to include the root directory (or src if relevant)
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV  # Adds current directory to PYTHONPATH

      # Step 2.2: Install dependencies for linting
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black

      # Step 3: Load Secrets for GCP Keys and validate json
      - name: Write Secret to JSON File
        env:
          GCP_KEY_COPILOT: ${{ secrets.GCP_KEY_COPILOT }}
          GCP_KEY_API: ${{ secrets.GCP_KEY_API }}
          GCP_KEY_FINETUNING: ${{ secrets.GCP_KEY_FINETUNING }}
        run: |
          mkdir -p src/rag_copilot_pipeline/secrets
          mkdir -p src/api_service/secrets
          mkdir -p src/finetuning_pipeline/secrets
          python -c "import os; open('src/rag_copilot_pipeline/secrets/gcp-key.json', 'w').write(os.getenv('GCP_KEY_COPILOT', ''))"
          python -c "import os; open('src/api_service/secrets/llm-service-account.json', 'w').write(os.getenv('GCP_KEY_API', ''))"
          python -c "import os; open('src/finetuning_pipeline/secrets/llm-service-account.json', 'w').write(os.getenv('GCP_KEY_FINETUNING', ''))"
          jq empty src/rag_copilot_pipeline/secrets/gcp-key.json
          jq empty src/api_service/secrets/llm-service-account.json
          jq empty src/finetuning_pipeline/secrets/llm-service-account.json

      # Step 4: Run linting (non-blocking)
      - name: Run flake8
        continue-on-error: true
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run pylint
        continue-on-error: true
        run: pylint src/

      - name: Check code formatting with black
        continue-on-error: true
        run: black --check .
      
      - name: Pre-create chat-history with permissions
        run: |
          sudo mkdir -p src/api_service/chat-history/gemini
          sudo chmod -R 777 src/
    
      # Step 4: Run the Primary API Docker Test Script
      - name: Run Primary API Docker Tests
        run: |
          cd src
          source docker-shell.sh
          sleep 10s

          # Define the services to test
          services=("rag-copilot-pipeline" "sales-mate-api-service")

          # Run pytest in each container
          for service in "${services[@]}"; do
            echo "Running tests in $service..."
            docker compose exec "$service" pipenv run pytest || {
              echo "Tests failed in $service. Aborting."
              docker compose down
              exit 1
            }
          done

          # Stop the containers after tests
          docker compose down

          echo "All tests passed!"

          cd ..

      # Step 5: Run the Docker Test Script for finetuning
      - name: Run Finetunning tests
        run: |
          cd src/finetuning_pipeline
          source docker-shell.sh "pipenv run pytest" || {
              echo "Tests failed. Aborting."
              # Stop all containers (assuming they were started earlier)
              docker ps -aq | xargs docker rm
              exit 1
            }

          echo "Stopping all containers..."
          docker ps -aq | xargs docker rm

          echo "All tests passed!"

          cd ..
  test-frontend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run linter
      - name: Run linter
        run: npm run lint

      # Step 5: Run tests
      - name: Run tests
        run: npm run test
