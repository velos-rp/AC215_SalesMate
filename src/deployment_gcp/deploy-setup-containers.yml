- name: Configure containers on app server
  hosts: appserver
  connection: ssh
  become: true

  tasks:
    # Setup secrets so containers can have access to GCP resources 
    - name: Create secrets directory
      file:
        path: "/srv/secrets"
        state: "directory"
        mode: 0755
    - name: Copy service account key file
      copy:
        src: ../secrets/gcp-service-shared.json
        dest: "/srv/secrets/gcp-service.json"
        mode: 0644
    - name: Copy service account key file
      copy:
        src: ../secrets/llm-service-account.json
        dest: "/srv/secrets/llm-service-account.json"
        mode: 0644
    - name: Authenticate gcloud using service account
      shell: "gcloud auth activate-service-account --key-file /srv/secrets/gcp-service.json"
    - name: Ensure artifact registry/docker is configured
      shell: "gcloud auth configure-docker us-docker.pkg.dev -q"
    
    # Create common network for all containers
    - name: Create network
      docker_network:
          name: "{{docker_network_name}}"
          driver: "bridge"
          attachable: "yes"

    - name: Copy docker tag file
      copy:
        src: .docker-tag
        dest: .docker-tag
        mode: 0644
    - name: "Get docker tag"
      shell: "cat .docker-tag"
      register: tag
    - name: Print tag
      debug:
        var: tag
    
    - name: List available images in the Artifact Registry repository
      command: >
        gcloud artifacts docker images list
        {{ artifact_registry_location }}/{{ gcp_project }}/{{ artifact_registry_repository }}
      register: artifact_images

    - name: Show the list of images
      debug:
        msg: "{{ artifact_images.stdout_lines }}"


    # Create a folder on persistent disk
    - name: Create persistent directory
      file:
        path: "/mnt/disk-1/persistent"
        state: "directory"
        mode: 0777
    - name: Create chromadb directory
      file:
        path: "/mnt/disk-1/chromadb"
        state: "directory"
        mode: 0777

    - name: Create vector-db container
      docker_container:
        name: "llm-rag-chromadb"
        image: "chromadb/chroma:0.5.18"
        state: started
        recreate: yes
        published_ports:
          - 8000:8000
        env:
          IS_PERSISTENT: "TRUE"
          ANONYMIZED_TELEMETRY: "FALSE"
          CHROMA_SERVER_CORS_ALLOW_ORIGINS: '["*"]'
        networks:
          - name: "{{docker_network_name}}"
        volumes:
          - /mnt/disk-1/chromadb:/chroma/chroma

    # - name: List all Docker containers
    #   community.docker.docker_container_info:
    #     name: ""
    #   register: all_containers

    # - name: Display all containers
    #   debug:
    #     var: all_containers.containers


    - name: Create rag-copilot-pipeline container
      docker_container:
        name: "rag-copilot-pipeline"
        image: "{{ artifact_registry_location }}/{{ gcp_project }}/{{ artifact_registry_repository }}/sales-mate-rag-copilot-pipeline:{{ tag.stdout }}"
        state: started
        recreate: yes
        pull: yes
        restart: yes
        published_ports:
          - 8081:8081
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "/secrets/gcp-service.json"
          GCP_PROJECT: "{{ gcp_project }}"
          DEV: "0"
        networks:
          - name: "{{docker_network_name}}"
        volumes:
          - /srv/secrets:/secrets
      
    - name: Create api-service container
      docker_container:
        name: "sales-mate-api-service"
        image: "{{ artifact_registry_location }}/{{ gcp_project }}/{{ artifact_registry_repository }}/sales-mate-api-service:{{ tag.stdout }}"
        state: started
        recreate: yes
        published_ports:
          - 9876:9876
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "/secrets/llm-service-account.json"
          GCP_PROJECT: "project-id-3187519002330642642"
          DEV: "0"
          FINETUNED_MODEL: "1"
          RAG_COLLECTION_NAME: "investment-management"
        networks:
          - name: "{{docker_network_name}}"
        volumes:
          - /mnt/disk-1/persistent:/persistent
          - /srv/secrets:/secrets

    - name: Create frontend container
      docker_container:
        name: "sales-mate-frontend-react"
        image: "{{ artifact_registry_location }}/{{ gcp_project }}/{{ artifact_registry_repository }}/sales-mate-frontend-react:{{ tag.stdout }}"
        state: started
        recreate: yes
        pull: yes
        restart: yes
        published_ports:
          - 3000:3000
        env:
          DEV: "0"
        networks:
          - name: "{{docker_network_name}}"
  
    - name: Check if containers are running
      shell: docker ps
    
    - name: "Remove all unused containers"
      shell: docker system prune -a -f